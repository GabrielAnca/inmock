<?php

namespace InMockBundle\Controller;

use InMockBundle\Factory\RequestFactory;
use InMockBundle\Service\RouterService;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Twig_Environment;
use Twig_Error;

/**
 * Class MockController
 *
 * @Route(service="inmock.controller.mock")
 *
 * @package InMockBundle\Controller
 */
class MockController extends Controller
{
    /**
     * @var RouterService $router
     */
    protected $router;

    /**
     * @var Twig_Environment $twig
     */
    protected $twig;

    /**
     * MockController constructor.
     *
     * @param RouterService    $router
     * @param Twig_Environment $twig
     */
    public function __construct(RouterService $router, Twig_Environment $twig)
    {
        $this->router = $router;
        $this->twig = $twig;
    }

    /**
     * @param Request $request
     * @param string  $path
     *
     * @return Response
     *
     * @throws NotFoundHttpException
     * @throws HttpException
     */
    public function serveAction(Request $request, string $path): Response
    {
        $requestMethod = $request->getMethod();
        $queryParameters = $request->query->all();
        $path = sprintf('/%s', $path);

        $request = RequestFactory::build($requestMethod, $path, $queryParameters);

        $route = $this->router->getRouteForRequest($request);

        if (empty($route)) {
            throw new NotFoundHttpException(
                sprintf(
                    'No route matches request %s %s%s',
                    strtoupper($requestMethod),
                    $path,
                    count($queryParameters) > 0 ? '?' . http_build_query($queryParameters) : ''
                )
            );
        }

        $template = $route->getResponse()->getTemplate();
        $statusCode = $route->getResponse()->getStatusCode();

        if (!empty($template)) {
            // Not using JsonResponse because it encodes the content generated by renderView()
            try {
                $content = $this->twig->render($template);
            } catch (Twig_Error $e) {
                throw new HttpException(
                    500,
                    sprintf('Could not render template file \'%s\': %s', $template, $e->getMessage()),
                    $e
                );
            }
        } else {
            $content = '';
        }

        $response = new Response($content, $statusCode);
        $response->headers->set('Content-Type', 'application/json');

        return $response;
    }
}
